Implementation Overview
-----------------------
The program simulates a Multilevel Queue Scheduling Algorithm with four priority queues, each using a different scheduling algorithm:

- **Q0 (Round Robin)**: Fair time-sharing with a time quantum of 20 seconds.
- **Q1 & Q2 (Shortest Job First)**: Minimizes waiting time by prioritizing shorter jobs.
- **Q3 (First-In-First-Out)**: Executes processes in the order of arrival.

The user inputs process details (ID, burst time, and priority), and the program distributes them into queues. Each queue is processed using its respective algorithm, and the waiting and turnaround times are calculated.

Results Analysis
----------------
The program outputs waiting and turnaround times for each process. Key observations:

- **Round Robin**: Ensures fairness but may increase turnaround time for longer processes.
- **SJF**: Reduces average waiting time but risks starvation for longer jobs.
- **FIFO**: Simple but inefficient if short processes are queued behind longer ones.

Pros and Cons of Scheduling Algorithms
--------------------------------------
- **Round Robin**: Fair but can increase turnaround time with frequent context switching.
- **SJF**: Efficient but may lead to starvation.
- **FIFO**: Easy to implement but lacks flexibility for short processes.

Conclusion
----------
The multilevel queue scheduling program effectively demonstrates how different algorithms manage processes based on priority. 

Round Robin ensures fairness but increases turnaround time for long jobs. 

SJF minimizes waiting time but risks starvation. 

FIFO is simple but inefficient for short processes behind long ones. 

However, the program lacks dynamic priority adjustments and process aging, leading to potential starvation in SJF. It also assumes valid input without error handling. 

Future improvements could include dynamic priorities, error handling, and support for more complex scenarios to enhance real-world applicability.
